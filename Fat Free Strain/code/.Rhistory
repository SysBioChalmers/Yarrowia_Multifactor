#filtering step: filter down regulated in all conditions
dn = map(tmp, ~ filter(.x,
P.Value < pval_cutoff &
logFC < neg_FC))
# count the number of genes in each Age Group for each comparison
for (i in 1:length(up)) {
tmp_B <-  data.frame(unclass(table(factor(up[[i]][["Age_Group"]],levels = c("Group I","Group II","Group III","Group IV","Group V","WGD")))))
colnames(tmp_B)<-names(up)[i]
if (i <2) {
up_summary <- tmp_B # create the new df
} else {
up_summary<-cbind(up_summary,tmp_B) #or add the new rows to the output df
}
}
# normalizing the number of genes to the total group size (number of genes in this group)
# first normalize the number of genes to the total number of genes in the group
for (i in 1:length(Size_group)){
if (i <2) {
up_summary_norm <- up_summary[i,]/Size_group[i]*100 # create the new df
} else {
up_summary_norm[i,] <- up_summary[i,]/Size_group[i]*100 #or add the new rows to the output df
}
}
# then normalize to the relative up regulated genes of the comparison
for (i in 1:length(up_summary)) {
total_DE <- sum(up_summary[,i])
total_DE_norm <- total_DE/5553*100
up_summary_norm[,i] <- up_summary_norm/total_DE_norm
}
for (i in 1:length(dn)) {
tmp_B <-  data.frame(unclass(table(factor(dn[[i]][["Age_Group"]],levels = c("Group I","Group II","Group III","Group IV","Group V","WGD")))))
colnames(tmp_B)<-names(dn)[i]
if (i <2) {
dn_summary <- tmp_B # create the new df
} else {
dn_summary<-cbind(dn_summary,tmp_B) #or add the new rows to the output df
}
}
# normalizing the number of genes to the total group size (number of genes in this group)
# first normalize the number of genes to the total number of genes in the group
for (i in 1:length(Size_group)){
if (i <2) {
dn_summary_norm <- dn_summary[i,]/Size_group[i]*100 # create the new df
} else {
dn_summary_norm[i,] <- dn_summary[i,]/Size_group[i]*100 #or add the new rows to the output df
}
}
# then normalize to the relative up regulated genes of the comparison
for (i in 1:length(dn_summary)) {
total_DE <- sum(dn_summary[,i])
total_DE_norm <- total_DE/5553*100
dn_summary_norm[,i] <- dn_summary_norm/total_DE_norm
}
summary <- dn_summary+up_summary #data frame that combines both up and down regulated genes
setwd("../results/Age_of_genes/up/")
setwd("../results/Age_of_genes/")
for (i in 1:length(df.list)){
filename = paste0(names(df.list[i]), "_up.png")
png(file=filename, width=600, height=350)
barplot(up_summary_norm[,i], xlab="Age Group", ylab="Fold enrichment", main= paste0(names(df.list[i])," up"),names.arg = rownames(up_summary))
dev.off()
}
setwd("../results/Age_of_genes/")
for (i in 1:length(df.list)){
filename = paste0(names(df.list[i]), "_dn.png")
png(file=filename, width=600, height=350)
barplot(dn_summary_norm[,i], xlab="Age Group", ylab="Fold enrichment", main= paste0(names(df.list[i])," dn"), names.arg = rownames(up_summary))
dev.off()
}
tmp = map(comp_list, ~ select(.x, c("genes", "logFC", "P.Value"))) #select only relevant columns
tmp <- map(tmp, ~ merge(.x,age_table)) # merging the Age of genes table
#set filter cut offs
pval_cutoff = 0.01
neg_FC = -1
pos_FC = 1
Size_group <- c(2835,314,805,236,276,1087)
#filtering step: filter up regulated in all conditions
up = map(tmp, ~ filter(.x,
P.Value < pval_cutoff &
logFC > pos_FC))
#filtering step: filter down regulated in all conditions
dn = map(tmp, ~ filter(.x,
P.Value < pval_cutoff &
logFC < neg_FC))
# count the number of genes in each Age Group for each comparison
for (i in 1:length(up)) {
tmp_B <-  data.frame(unclass(table(factor(up[[i]][["Age_Group"]],levels = c("Group I","Group II","Group III","Group IV","Group V","WGD")))))
colnames(tmp_B)<-names(up)[i]
if (i <2) {
up_summary <- tmp_B # create the new df
} else {
up_summary<-cbind(up_summary,tmp_B) #or add the new rows to the output df
}
}
# normalizing the number of genes to the total group size (number of genes in this group)
# first normalize the number of genes to the total number of genes in the group
for (i in 1:length(Size_group)){
if (i <2) {
up_summary_norm <- up_summary[i,]/Size_group[i]*100 # create the new df
} else {
up_summary_norm[i,] <- up_summary[i,]/Size_group[i]*100 #or add the new rows to the output df
}
}
# then normalize to the relative up regulated genes of the comparison
for (i in 1:length(up_summary)) {
total_DE <- sum(up_summary[,i])
total_DE_norm <- total_DE/5553*100
up_summary_norm[,i] <- up_summary_norm/total_DE_norm
}
for (i in 1:length(dn)) {
tmp_B <-  data.frame(unclass(table(factor(dn[[i]][["Age_Group"]],levels = c("Group I","Group II","Group III","Group IV","Group V","WGD")))))
colnames(tmp_B)<-names(dn)[i]
if (i <2) {
dn_summary <- tmp_B # create the new df
} else {
dn_summary<-cbind(dn_summary,tmp_B) #or add the new rows to the output df
}
}
# normalizing the number of genes to the total group size (number of genes in this group)
# first normalize the number of genes to the total number of genes in the group
for (i in 1:length(Size_group)){
if (i <2) {
dn_summary_norm <- dn_summary[i,]/Size_group[i]*100 # create the new df
} else {
dn_summary_norm[i,] <- dn_summary[i,]/Size_group[i]*100 #or add the new rows to the output df
}
}
# then normalize to the relative up regulated genes of the comparison
for (i in 1:length(dn_summary)) {
total_DE <- sum(dn_summary[,i])
total_DE_norm <- total_DE/5553*100
dn_summary_norm[,i] <- dn_summary_norm/total_DE_norm
}
summary <- dn_summary+up_summary #data frame that combines both up and down regulated genes
setwd("../results/Age_of_genes/")
for (i in 1:length(df.list)){
filename = paste0(names(df.list[i]), "_up.png")
png(file=filename, width=600, height=350)
barplot(up_summary_norm[,i], xlab="Age Group", ylab="Fold enrichment", main= paste0(names(df.list[i])," up"),names.arg = rownames(up_summary))
dev.off()
}
library(tidyverse)
library(eulerr)
library(gridExtra)
library("readxl")
select = dplyr::select
setwd("../../../Linear_modelling/01_RNA_analysis/results/Comparison_Output/")
comp_list <- list.files(pattern = "*.csv", full.names = FALSE) #file names of excel files (comparison outputs) to be imported
df.list <- sapply(comp_list, read.csv2, simplify = FALSE) #import comparison outputs
age_table <- read_xlsx("../../../Q4_Stress/code/data/Age_table.xlsx")
age_table <- read_xlsx("../../../Q4_Stress/code/data/Age_table.xlsx")
View(age_table)
View(df.list)
tmp = map(df.list, ~ select(.x, c("genes", "logFC", "P.Value"))) #select only relevant columns
View(tmp)
tmp <- map(tmp, ~ merge(.x,age_table)) # merging the Age of genes table
View(tmp)
View(tmp)
#set filter cut offs
pval_cutoff = 0.01
neg_FC = -1
pos_FC = 1
Size_group <- c(3808,346,523,863,908) # the number of genes in the different age groups
#filtering step: filter up regulated in all conditions
up = map(tmp, ~ filter(.x,
P.Value < pval_cutoff &
logFC > pos_FC))
View(up)
#filtering step: filter down regulated in all conditions
dn = map(tmp, ~ filter(.x,
P.Value < pval_cutoff &
logFC < neg_FC))
# count the number of genes in each Age Group for each comparison
for (i in 1:length(up)) {
tmp_B <-  data.frame(unclass(table(factor(up[[i]][["Age_Group"]],levels = c("Group I","Group II","Group III","Group IV","Group V")))))
colnames(tmp_B)<-names(up)[i]
if (i <2) {
up_summary <- tmp_B # create the new df
} else {
up_summary<-cbind(up_summary,tmp_B) #or add the new rows to the output df
}
}
View(up_summary)
length(Size_group)
i=1
up_summary[i,]
up_summary[i,]
up_summary_norm <- up_summary[i,]/Size_group[i]*100 # create the new df
View(up_summary_norm)
i=2
up_summary_norm[i,] <- up_summary[i,]/Size_group[i]*100 #or add the new rows to the output df
View(up_summary_norm)
length(up_summary)
i=1
sum(up_summary[,i]
sum(up_summary[,i]
sum(up_summary[,i]
sum(up_summary[,i]
sum(up_summary[,i]
)
View(up_summary)
total_DE <- sum(up_summary[,i])
total_DE_norm <- total_DE/6448*100
# first normalize the number of genes to the total number of genes in the group
for (i in 1:length(Size_group)){
if (i <2) {
up_summary_norm <- up_summary[i,]/Size_group[i]*100 # create the new df
} else {
up_summary_norm[i,] <- up_summary[i,]/Size_group[i]*100 #or add the new rows to the output df
}
}
total_DE_norm <- (total_DE/6448)*100
up_summary_norm[,i] <- up_summary_norm[,i]/total_DE_norm
# first normalize the number of genes to the total number of genes in the group
for (i in 1:length(Size_group)){
if (i <2) {
up_summary_norm <- up_summary[i,]/Size_group[i]*100 # create the new df
} else {
up_summary_norm[i,] <- up_summary[i,]/Size_group[i]*100 #or add the new rows to the output df
}
}
# then normalize to the relative up regulated genes of the comparison
for (i in 1:length(up_summary)) {
total_DE <- sum(up_summary[,i])
total_DE_norm <- (total_DE/6448)*100
up_summary_norm[,i] <- up_summary_norm[,i]/total_DE_norm
}
tmp = map(df.list, ~ select(.x, c("genes", "logFC", "P.Value"))) #select only relevant columns
tmp <- map(tmp, ~ merge(.x,age_table)) # merging the Age of genes table
#set filter cut offs
pval_cutoff = 0.01
neg_FC = -1
pos_FC = 1
Size_group <- c(3808,346,523,863,908) # the number of genes in the different age groups
#filtering step: filter up regulated in all conditions
up = map(tmp, ~ filter(.x,
P.Value < pval_cutoff &
logFC > pos_FC))
#filtering step: filter down regulated in all conditions
dn = map(tmp, ~ filter(.x,
P.Value < pval_cutoff &
logFC < neg_FC))
# count the number of genes in each Age Group for each comparison
for (i in 1:length(up)) {
tmp_B <-  data.frame(unclass(table(factor(up[[i]][["Age_Group"]],levels = c("Group I","Group II","Group III","Group IV","Group V")))))
colnames(tmp_B)<-names(up)[i]
if (i <2) {
up_summary <- tmp_B # create the new df
} else {
up_summary<-cbind(up_summary,tmp_B) #or add the new rows to the output df
}
}
# normalizing the number of genes to the total group size (number of genes in this group)
# first normalize the number of genes to the total number of genes in the group
for (i in 1:length(Size_group)){
if (i <2) {
up_summary_norm <- up_summary[i,]/Size_group[i]*100 # create the new df
} else {
up_summary_norm[i,] <- up_summary[i,]/Size_group[i]*100 #or add the new rows to the output df
}
}
# then normalize to the relative up regulated genes of the comparison
for (i in 1:length(up_summary)) {
total_DE <- sum(up_summary[,i])
total_DE_norm <- (total_DE/6448)*100
up_summary_norm[,i] <- up_summary_norm[,i]/total_DE_norm
}
for (i in 1:length(dn)) {
tmp_B <-  data.frame(unclass(table(factor(dn[[i]][["Age_Group"]],levels = c("Group I","Group II","Group III","Group IV","Group V")))))
colnames(tmp_B)<-names(dn)[i]
if (i <2) {
dn_summary <- tmp_B # create the new df
} else {
dn_summary<-cbind(dn_summary,tmp_B) #or add the new rows to the output df
}
}
# normalizing the number of genes to the total group size (number of genes in this group)
# first normalize the number of genes to the total number of genes in the group
for (i in 1:length(Size_group)){
if (i <2) {
dn_summary_norm <- dn_summary[i,]/Size_group[i]*100 # create the new df
} else {
dn_summary_norm[i,] <- dn_summary[i,]/Size_group[i]*100 #or add the new rows to the output df
}
}
# then normalize to the relative up regulated genes of the comparison
for (i in 1:length(dn_summary)) {
total_DE <- sum(dn_summary[,i])
total_DE_norm <- total_DE/6448*100
dn_summary_norm[,i] <- dn_summary_norm[,i]/total_DE_norm
}
summary <- dn_summary_norm+up_summary_norm #data frame that combines both up and down regulated genes
setwd("../results/Age_of_genes/up/")
for (i in 1:length(df.list)){
filename = paste0(names(df.list[i]), "_up.png")
png(file=filename, width=600, height=350)
barplot(up_summary_norm[,i], xlab="Age Group", ylab="Number of genes", main= paste0(names(df.list[i])," up"),names.arg = rownames(up_summary))
dev.off()
}
setwd("../results/Age_of_genes/down/")
for (i in 1:length(df.list)){
filename = paste0(names(df.list[i]), "_dn.png")
png(file=filename, width=600, height=350)
barplot(dn_summary_norm[,i], xlab="Age Group", ylab="Number of genes", main= paste0(names(df.list[i])," dn"), names.arg = rownames(up_summary))
dev.off()
}
setwd("../results/Age_of_genes/both/")
for (i in 1:length(df.list)){
filename = paste0(names(df.list[i]), ".png")
png(file=filename, width=600, height=350)
barplot(summary[,i], xlab="Age Group", ylab="Number of genes", main= paste0(names(df.list[i])), names.arg = rownames(summary))
dev.off()
}
library(tidyverse)
library(eulerr)
library(gridExtra)
library("readxl")
select = dplyr::select
load("../results/Comparison_Output/Comparison_Output.RData")
load("../results/Comparison_Output/Comparison_Output_batch.RData")
comp_list <- c(comp_list, comp_list_batch)
age_table <- read_xlsx("../data/Age_of_genes_Groups.xlsx")
library(tidyverse)
library(eulerr)
library(gridExtra)
library("readxl")
select = dplyr::select
load("../results/Comparison_Output/Comparison_Output.RData")
load("../results/Comparison_Output/Comparison_Output_batch.RData")
comp_list <- c(comp_list, comp_list_batch)
age_table <- read_xlsx("../data/Age_of_genes_Groups.xlsx")
tmp = map(comp_list, ~ select(.x, c("genes", "logFC", "P.Value"))) #select only relevant columns
tmp <- map(tmp, ~ merge(.x,age_table)) # merging the Age of genes table
#set filter cut offs
pval_cutoff = 0.01
neg_FC = -1
pos_FC = 1
Size_group <- c(2835,314,805,236,276,1087) # number of genes in the different Age groups
#filtering step: filter up regulated in all conditions
up = map(tmp, ~ filter(.x,
P.Value < pval_cutoff &
logFC > pos_FC))
#filtering step: filter down regulated in all conditions
dn = map(tmp, ~ filter(.x,
P.Value < pval_cutoff &
logFC < neg_FC))
# count the number of genes in each Age Group for each comparison
for (i in 1:length(up)) {
tmp_B <-  data.frame(unclass(table(factor(up[[i]][["Age_Group"]],levels = c("Group I","Group II","Group III","Group IV","Group V","WGD")))))
colnames(tmp_B)<-names(up)[i]
if (i <2) {
up_summary <- tmp_B # create the new df
} else {
up_summary<-cbind(up_summary,tmp_B) #or add the new rows to the output df
}
}
# normalizing the number of genes to the total group size (number of genes in this group)
# first normalize the number of genes to the total number of genes in the group
for (i in 1:length(Size_group)){
if (i <2) {
up_summary_norm <- up_summary[i,]/Size_group[i]*100 # create the new df
} else {
up_summary_norm[i,] <- up_summary[i,]/Size_group[i]*100 #or add the new rows to the output df
}
}
# then normalize to the relative up regulated genes of the comparison
for (i in 1:length(up_summary)) {
total_DE <- sum(up_summary[,i])
total_DE_norm <- total_DE/5553*100
up_summary_norm[,i] <- up_summary_norm[,i]/total_DE_norm
}
for (i in 1:length(dn)) {
tmp_B <-  data.frame(unclass(table(factor(dn[[i]][["Age_Group"]],levels = c("Group I","Group II","Group III","Group IV","Group V","WGD")))))
colnames(tmp_B)<-names(dn)[i]
if (i <2) {
dn_summary <- tmp_B # create the new df
} else {
dn_summary<-cbind(dn_summary,tmp_B) #or add the new rows to the output df
}
}
# normalizing the number of genes to the total group size (number of genes in this group)
# first normalize the number of genes to the total number of genes in the group
for (i in 1:length(Size_group)){
if (i <2) {
dn_summary_norm <- dn_summary[i,]/Size_group[i]*100 # create the new df
} else {
dn_summary_norm[i,] <- dn_summary[i,]/Size_group[i]*100 #or add the new rows to the output df
}
}
# then normalize to the relative up regulated genes of the comparison
for (i in 1:length(dn_summary)) {
total_DE <- sum(dn_summary[,i])
total_DE_norm <- total_DE/5553*100
dn_summary_norm[,i] <- dn_summary_norm[,i]/total_DE_norm
}
summary <- dn_summary_norm+up_summary_norm #data frame that combines both up and down regulated genes
setwd("../results/Age_of_genes/")
for (i in 1:length(comp_list)){
filename = paste0(names(comp_list[i]), "_up.png")
png(file=filename, width=600, height=350)
barplot(up_summary_norm[,i], xlab="Age Group", ylab="Fold enrichment", main= paste0(names(comp_list[i])," up"),names.arg = rownames(up_summary))
dev.off()
}
setwd("../results/Age_of_genes/")
for (i in 1:length(comp_list)){
filename = paste0(names(comp_list[i]), "_dn.png")
png(file=filename, width=600, height=350)
barplot(dn_summary_norm[,i], xlab="Age Group", ylab="Fold enrichment", main= paste0(names(comp_list[i])," dn"), names.arg = rownames(up_summary))
dev.off()
}
setwd("../results/Age_of_genes/")
for (i in 1:length(comp_list)){
filename = paste0(names(comp_list[i]), ".png")
png(file=filename, width=600, height=350)
barplot(summary[,i], xlab="Age Group", ylab="Fold enrichment", main= paste0(names(comp_list[i])), names.arg = rownames(summary))
dev.off()
}
library(tidyverse)
library(eulerr)
library(gridExtra)
library("readxl")
select = dplyr::select
load("../results/Comparison_Output/Comparison_Output.RData")
load("../results/Comparison_Output/Comparison_Output_batch.RData")
comp_list <- c(comp_list, comp_list_batch)
age_table <- read_xlsx("../data/Age_of_genes_Groups.xlsx")
tmp = map(comp_list, ~ select(.x, c("genes", "logFC", "P.Value"))) #select only relevant columns
tmp <- map(tmp, ~ merge(.x,age_table)) # merging the Age of genes table
#set filter cut offs
pval_cutoff = 0.01
neg_FC = -1
pos_FC = 1
Size_group <- c(2835,314,805,236,276,1087) # number of genes in the different Age groups
#filtering step: filter up regulated in all conditions
up = map(tmp, ~ filter(.x,
P.Value < pval_cutoff &
logFC > pos_FC))
#filtering step: filter down regulated in all conditions
dn = map(tmp, ~ filter(.x,
P.Value < pval_cutoff &
logFC < neg_FC))
# count the number of genes in each Age Group for each comparison
for (i in 1:length(up)) {
tmp_B <-  data.frame(unclass(table(factor(up[[i]][["Age_Group"]],levels = c("Group I","Group II","Group III","Group IV","Group V","WGD")))))
colnames(tmp_B)<-names(up)[i]
if (i <2) {
up_summary <- tmp_B # create the new df
} else {
up_summary<-cbind(up_summary,tmp_B) #or add the new rows to the output df
}
}
# normalizing the number of genes to the total group size (number of genes in this group)
# first normalize the number of genes to the total number of genes in the group
for (i in 1:length(Size_group)){
if (i <2) {
up_summary_norm <- up_summary[i,]/Size_group[i]*100 # create the new df
} else {
up_summary_norm[i,] <- up_summary[i,]/Size_group[i]*100 #or add the new rows to the output df
}
}
# then normalize to the relative up regulated genes of the comparison
for (i in 1:length(up_summary)) {
total_DE <- sum(up_summary[,i])
total_DE_norm <- total_DE/5553*100
up_summary_norm[,i] <- up_summary_norm[,i]/total_DE_norm
}
for (i in 1:length(dn)) {
tmp_B <-  data.frame(unclass(table(factor(dn[[i]][["Age_Group"]],levels = c("Group I","Group II","Group III","Group IV","Group V","WGD")))))
colnames(tmp_B)<-names(dn)[i]
if (i <2) {
dn_summary <- tmp_B # create the new df
} else {
dn_summary<-cbind(dn_summary,tmp_B) #or add the new rows to the output df
}
}
# normalizing the number of genes to the total group size (number of genes in this group)
# first normalize the number of genes to the total number of genes in the group
for (i in 1:length(Size_group)){
if (i <2) {
dn_summary_norm <- dn_summary[i,]/Size_group[i]*100 # create the new df
} else {
dn_summary_norm[i,] <- dn_summary[i,]/Size_group[i]*100 #or add the new rows to the output df
}
}
# then normalize to the relative up regulated genes of the comparison
for (i in 1:length(dn_summary)) {
total_DE <- sum(dn_summary[,i])
total_DE_norm <- total_DE/5553*100
dn_summary_norm[,i] <- dn_summary_norm[,i]/total_DE_norm
}
summary <- dn_summary_norm+up_summary_norm #data frame that combines both up and down regulated genes
setwd("../results/Age_of_genes/up/")
for (i in 1:length(comp_list)){
filename = paste0(names(comp_list[i]), "_up.png")
png(file=filename, width=600, height=350)
barplot(up_summary_norm[,i], xlab="Age Group", ylab="Fold enrichment", main= paste0(names(comp_list[i])," up"),names.arg = rownames(up_summary))
dev.off()
}
setwd("../results/Age_of_genes/down/")
for (i in 1:length(comp_list)){
filename = paste0(names(comp_list[i]), "_dn.png")
png(file=filename, width=600, height=350)
barplot(dn_summary_norm[,i], xlab="Age Group", ylab="Fold enrichment", main= paste0(names(comp_list[i])," dn"), names.arg = rownames(up_summary))
dev.off()
}
setwd("../results/Age_of_genes/both/")
for (i in 1:length(comp_list)){
filename = paste0(names(comp_list[i]), ".png")
png(file=filename, width=600, height=350)
barplot(summary[,i], xlab="Age Group", ylab="Fold enrichment", main= paste0(names(comp_list[i])), names.arg = rownames(summary))
dev.off()
}
